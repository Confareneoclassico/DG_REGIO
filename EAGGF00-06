import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import chaospy as cp
import random
from scipy import stats
%matplotlib inline

df2 = pd.read_excel('Index slope 00-06.xlsx', sheetname='EAGGF00-06', parse_cols = 'CI:DY')
df2.columns = df2.iloc[2]
df3 = df2.iloc[3:253]
df4 = df3.set_index('Row Labels')
mu = pd.DataFrame(index = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, \
2014, 2015], data = (df4.columns.values-1999)*(df4[2015]['AT11']-df4[2000]['AT11'])/(2009-1999))
mu = mu.rename(columns={0: 'mu1'})
df4b = pd.concat([df4, mu.T])
for i in range (2010,2016):
    df4b[i]['mu1'] = 1
    
for i, row in df4b.iterrows():
    b = (df4b[2000]-df4b[2000]['mu1'], df4b[2001]-df4b[2001]['mu1'], df4b[2002]-df4b[2002]['mu1'],\
    df4b[2003]-df4b[2003]['mu1'], df4b[2004]-df4b[2004]['mu1'], df4b[2005]-df4b[2005]['mu1'], \
    df4b[2006]-df4b[2006]['mu1'], df4b[2007]-df4b[2007]['mu1'], df4b[2008]-df4b[2008]['mu1'], \
    df4b[2009]-df4b[2009]['mu1'], df4b[2010]-df4b[2010]['mu1'], df4b[2011]-df4b[2011]['mu1'],\
    df4b[2012]-df4b[2012]['mu1'], df4b[2013]-df4b[2013]['mu1'], df4b[2014]-df4b[2014]['mu1'],\
    df4b[2015]-df4b[2015]['mu1'])
    c = sum(b)
    df4b['muavg']= c

# Compute the relative scale
df4b['murel']=(df4b['muavg']['DE80']-df4b['muavg'])/(df4b['muavg']['DE80']-min(df4b['muavg']))
df6 = df4b.sort_values(['murel'], ascending = True)
df7 = df6.drop('mu1')

# Prepare for the expenditure allocations
df21 = pd.read_excel('Index slope 00-06.xlsx', sheetname='EAGGF00-06', parse_cols = 'J:Z')
df21.columns = df21.iloc[4]
df31 = df21.iloc[5:255]
df41 = df31.set_index('Row Labels')
df51 = df41.T.fillna(0)

# Define the residues A
B9 = []
for n in range(1,10):
    def A(n):
        return [(2**(j))/(2**n-1) for j in range(n)]
    B9.append(A(n))
C9 = np.array(B9)
D9 = np.insert(C9[0], [0, 0, 0, 0, 0, 0, 0, 0], 0)
E9 = np.insert(C9[1], [0, 0, 0, 0, 0, 0, 0], 0)
F9 = np.insert(C9[2], [0, 0, 0, 0, 0, 0], 0)
G9 = np.insert(C9[3], [0, 0, 0, 0, 0], 0)
H9 = np.insert(C9[4], [0, 0, 0, 0], 0)
I9 = np.insert(C9[5], [0, 0, 0], 0)
J9 = np.insert(C9[6], [0, 0], 0)
K9 = np.insert(C9[7], [0], 0)
L9 = np.array(C9[8])
M9 = (D9, E9, F9, G9, H9, I9, J9, K9, L9)

B8 = []
for n in range(1,9):
    def A(n):
        return [(2**(j))/(2**n-1) for j in range(n)]
    B8.append(A(n))
C8 = np.array(B8)
D8 = np.insert(C8[0], [0, 0, 0, 0, 0, 0, 0], 0)
E8 = np.insert(C8[1], [0, 0, 0, 0, 0, 0], 0)
F8 = np.insert(C8[2], [0, 0, 0, 0, 0], 0)
G8 = np.insert(C8[3], [0, 0, 0, 0], 0)
H8 = np.insert(C8[4], [0, 0, 0], 0)
I8 = np.insert(C8[5], [0, 0], 0)
J8 = np.insert(C8[6], [0], 0)
K8 = np.array(C8[7])
L8 = (D8, E8, F8, G8, H8, I8, J8, K8)

B7 = []
for n in range(1,8):
    def A(n):
        return [(2**(j))/(2**n-1) for j in range(n)]
    B7.append(A(n))
C7 = np.array(B7)
D7 = np.insert(C7[0], [0, 0, 0, 0, 0, 0], 0)
E7 = np.insert(C7[1], [0, 0, 0, 0, 0], 0)
F7 = np.insert(C7[2], [0, 0, 0, 0], 0)
G7 = np.insert(C7[3], [0, 0, 0], 0)
H7 = np.insert(C7[4], [0, 0], 0)
I7 = np.insert(C7[5], [0], 0)
J7 = np.array(C7[6])
K7 = (D7, E7, F7, G7, H7, I7, J7)

B6 = []
for n in range(1,7):
    def A(n):
        return [(2**(j))/(2**n-1) for j in range(n)]
    B6.append(A(n))
C6 = np.array(B6)
D6 = np.insert(C6[0], [0, 0, 0, 0, 0], 0)
E6 = np.insert(C6[1], [0, 0, 0, 0], 0)
F6 = np.insert(C6[2], [0, 0, 0], 0)
G6 = np.insert(C6[3], [0, 0], 0)
H6 = np.insert(C6[4], [0], 0)
I6 = np.array(C6[5])
J6 = (D6, E6, F6, G6, H6, I6)

B5 = []
for n in range(1,6):
    def A(n):
        return [(2**(j))/(2**n-1) for j in range(n)]
    B5.append(A(n))
C5 = np.array(B5)
D5 = np.insert(C5[0], [0, 0, 0, 0], 0)
E5 = np.insert(C5[1], [0, 0, 0], 0)
F5 = np.insert(C5[2], [0, 0], 0)
G5 = np.insert(C5[3], [0], 0)
H5 = np.array(C5[4])
I5 = (D5, E5, F5, G5, H5)

B4 = []
for n in range(1,5):
    def A(n):
        return [(2**(j))/(2**n-1) for j in range(n)]
    B4.append(A(n))
C4 = np.array(B4)
D4 = np.insert(C4[0], [0, 0, 0], 0)
E4 = np.insert(C4[1], [0, 0], 0)
F4 = np.insert(C4[2], [0], 0)
G4 = np.array(C4[3])
H4 = (D4, E4, F4, G4)

B3 = []
for n in range(1,4):
    def A(n):
        return [(2**(j))/(2**n-1) for j in range(n)]
    B3.append(A(n))
C3 = np.array(B3)
D3 = np.insert(C3[0], [0, 0], 0)
E3 = np.insert(C3[1], [0], 0)
F3 = np.array(C3[2])
G3 = (D3, E3, F3)

B2 = []
for n in range(1,3):
    def A(n):
        return [(2**(j))/(2**n-1) for j in range(n)]
    B2.append(A(n))
C2 = np.array(B2)
D2 = np.insert(C2[0], [0], 0)
E2 = np.array(C2[1])
F2 = (D2, E2)

B1 = []
for n in range(1,2):
    def A(n):
        return [(2**(j))/(2**n-1) for j in range(n)]
    B1.append(A(n))
C1 = np.array(B1)
E1 = (C1)

# Define the FiMin and FiMax distributions
FiMin = cp.Uniform(0.20, 0.40)
distributionFiMin = FiMin.sample(10000, rule="S")
np.random.shuffle(distributionFiMin)
FiMax = cp.Uniform(0.80, 1.00)
distributionFiMax = FiMax.sample(10000, rule="S")
np.random.shuffle(distributionFiMax)

# Define the FiMinB and FiMaxB distributions
FiMinB = cp.Uniform(0.20, 0.40)
distributionFiMinB = FiMinB.sample(10000, rule="S")
np.random.shuffle(distributionFiMinB)
FiMaxB = cp.Uniform(0.80, 1.00)
distributionFiMaxB = FiMaxB.sample(10000, rule="S")
np.random.shuffle(distributionFiMaxB)

Rc = pd.DataFrame([])
RcMax = pd.DataFrame([])
Rcmin = pd.DataFrame([])
for k, row in df7.iterrows():
    muA = df7['murel']
    distributionFi = distributionFiMax - muA * (distributionFiMax - distributionFiMin)
    distributionFiAB2 = distributionFiMaxB - muA * (distributionFiMaxB - distributionFiMin)
    distributionFiAB1 = distributionFiMax - muA * (distributionFiMax - distributionFiMinB)
    Rc[k] = pd.DataFrame(distributionFi[k], columns = ['Fi'])
    RcMax[k] = pd.DataFrame(distributionFiAB2[k], columns = ['Fi'])
    Rcmin[k] = pd.DataFrame(distributionFiAB1[k], columns = ['Fi'])

R2009 = pd.DataFrame([])
R2008 = pd.DataFrame([])
R2007 = pd.DataFrame([])
R2006 = pd.DataFrame([])
R2005 = pd.DataFrame([])
R2004 = pd.DataFrame([])
R2003 = pd.DataFrame([])
R2002 = pd.DataFrame([])
R2001 = pd.DataFrame([])
R2000 = pd.DataFrame([])
RAB22009 = pd.DataFrame([])
RAB22008 = pd.DataFrame([])
RAB22007 = pd.DataFrame([])
RAB22006 = pd.DataFrame([])
RAB22005 = pd.DataFrame([])
RAB22004 = pd.DataFrame([])
RAB22003 = pd.DataFrame([])
RAB22002 = pd.DataFrame([])
RAB22001 = pd.DataFrame([])
RAB22000 = pd.DataFrame([])
RAB12009 = pd.DataFrame([])
RAB12008 = pd.DataFrame([])
RAB12007 = pd.DataFrame([])
RAB12006 = pd.DataFrame([])
RAB12005 = pd.DataFrame([])
RAB12004 = pd.DataFrame([])
RAB12003 = pd.DataFrame([])
RAB12002 = pd.DataFrame([])
RAB12001 = pd.DataFrame([])
RAB12000 = pd.DataFrame([])
R12009 = pd.DataFrame([])
R12008 = pd.DataFrame([])
R12007 = pd.DataFrame([])
R12006 = pd.DataFrame([])
R12005 = pd.DataFrame([])
R12004 = pd.DataFrame([])
R12003 = pd.DataFrame([])
R12002 = pd.DataFrame([])
R12001 = pd.DataFrame([])
R12000 = pd.DataFrame([])
R1AB22009 = pd.DataFrame([])
R1AB22008 = pd.DataFrame([])
R1AB22007 = pd.DataFrame([])
R1AB22006 = pd.DataFrame([])
R1AB22005 = pd.DataFrame([])
R1AB22004 = pd.DataFrame([])
R1AB22003 = pd.DataFrame([])
R1AB22002 = pd.DataFrame([])
R1AB22001 = pd.DataFrame([])
R1AB22000 = pd.DataFrame([])
R1AB12009 = pd.DataFrame([])
R1AB12008 = pd.DataFrame([])
R1AB12007 = pd.DataFrame([])
R1AB12006 = pd.DataFrame([])
R1AB12005 = pd.DataFrame([])
R1AB12004 = pd.DataFrame([])
R1AB12003 = pd.DataFrame([])
R1AB12002 = pd.DataFrame([])
R1AB12001 = pd.DataFrame([])
R1AB12000 = pd.DataFrame([])

for c in df51:
    n9 = int(muA[c]*(9-1))+1
    n8 = int(muA[c]*(8-1))+1
    n7 = int(muA[c]*(7-1))+1
    n6 = int(muA[c]*(6-1))+1
    n5 = int(muA[c]*(5-1))+1
    n4 = int(muA[c]*(4-1))+1
    n3 = int(muA[c]*(3-1))+1
    n2 = int(muA[c]*(2-1))+1
    Q9 = random.choice(M9[0:n9])
    Q8 = random.choice(L8[0:n8])
    Q7 = random.choice(K7[0:n7])
    Q6 = random.choice(J6[0:n6])
    Q5 = random.choice(I5[0:n5])
    Q4 = random.choice(H4[0:n4])
    Q3 = random.choice(G3[0:n3])
    Q2 = random.choice(F2[0:n2])
    R2009[c] = Rc[c]*(df51[c][2009])+df51[c][2010]+df51[c][2011]+df51[c][2012]+df51[c][2013]+df51[c][2014]+df51[c][2015]
    R2008[c] = Rc[c]*(df51[c][2008])
    R2007[c] = Rc[c]*(df51[c][2007])
    R2006[c] = Rc[c]*(df51[c][2006])
    R2005[c] = Rc[c]*(df51[c][2005])
    R2004[c] = Rc[c]*(df51[c][2004])
    R2003[c] = Rc[c]*(df51[c][2003])
    R2002[c] = Rc[c]*(df51[c][2002])
    R2001[c] = Rc[c]*(df51[c][2001])
    R2000[c] = (Rc[c]/Rc[c])*df51[c][2000]
    RAB22009[c] = RcMax[c]*(df51[c][2009])+df51[c][2010]+df51[c][2011]+df51[c][2012]+df51[c][2013]+df51[c][2014]+df51[c][2015]
    RAB22008[c] = RcMax[c]*(df51[c][2008])
    RAB22007[c] = RcMax[c]*(df51[c][2007])
    RAB22006[c] = RcMax[c]*(df51[c][2006])
    RAB22005[c] = RcMax[c]*(df51[c][2005])
    RAB22004[c] = RcMax[c]*(df51[c][2004])
    RAB22003[c] = RcMax[c]*(df51[c][2003])
    RAB22002[c] = RcMax[c]*(df51[c][2002])
    RAB22001[c] = RcMax[c]*(df51[c][2001])
    RAB22000[c] = (RcMax[c]/RcMax[c])*df51[c][2000]
    RAB12009[c] = Rcmin[c]*(df51[c][2009])+df51[c][2010]+df51[c][2011]+df51[c][2012]+df51[c][2013]+df51[c][2014]+df51[c][2015]
    RAB12008[c] = Rcmin[c]*(df51[c][2008])
    RAB12007[c] = Rcmin[c]*(df51[c][2007])
    RAB12006[c] = Rcmin[c]*(df51[c][2006])
    RAB12005[c] = Rcmin[c]*(df51[c][2005])
    RAB12004[c] = Rcmin[c]*(df51[c][2004])
    RAB12003[c] = Rcmin[c]*(df51[c][2003])
    RAB12002[c] = Rcmin[c]*(df51[c][2002])
    RAB12001[c] = Rcmin[c]*(df51[c][2001])
    RAB12000[c] = (Rcmin[c]/Rcmin[c])*df51[c][2000]
    R12009[c] = R2009[c]
    R12008[c] = R2008[c] + (1 - Rc[c]) * df51[c][2009] *  Q9[8]
    R12007[c] = R2007[c] + (1 - Rc[c]) * (df51[c][2009] *  Q9[7] + df51[c][2008] * Q8[7])
    R12006[c] = R2006[c] + (1 - Rc[c]) * (df51[c][2009] *  Q9[6]\
    + df51[c][2008] * Q8[6] + df51[c][2007] * Q7[6])
    R12005[c] = R2005[c] + (1 - Rc[c]) * (df51[c][2009] *  Q9[5]\
    + df51[c][2008] * Q8[5] + df51[c][2007] * Q7[5] \
    + df51[c][2006] * Q6[5])
    R12004[c] = R2004[c] + (1 - Rc[c]) * (df51[c][2009] *  Q9[4]\
    + df51[c][2008] * Q8[4] + df51[c][2007] * Q7[4] \
    + df51[c][2006] * Q6[4] + df51[c][2005] * Q5[4])
    R12003[c] = R2003[c] + (1 - Rc[c]) * (df51[c][2009] *  Q9[3]\
    + df51[c][2008] * Q8[3] + df51[c][2007] * Q7[3] \
    + df51[c][2006] * Q6[3] + df51[c][2005] * Q5[3] \
    + df51[c][2004] * Q4[3])
    R12002[c] = R2002[c] + (1 - Rc[c]) * (df51[c][2009] *  Q9[2]\
    + df51[c][2008] * Q8[2] + df51[c][2007] * Q7[2] \
    + df51[c][2006] * Q6[2] + df51[c][2005] * Q5[2] \
    + df51[c][2004] * Q4[2] + df51[c][2003] * Q3[2])
    R12001[c] = R2001[c] + (1 - Rc[c]) * (df51[c][2009] *  Q9[1]\
    + df51[c][2008] * Q8[1] + df51[c][2007] * Q7[1] \
    + df51[c][2006] * Q6[1] + df51[c][2005] * Q5[1] \
    + df51[c][2004] * Q4[1] + df51[c][2003] * Q3[1] \
    + df51[c][2002] * Q2[1])
    R12000[c] = R2000[c] + (1 - Rc[c]) * (df51[c][2009] *  Q9[0]\
    + df51[c][2008] * Q8[0] + df51[c][2007] * Q7[0] \
    + df51[c][2006] * Q6[0] + df51[c][2005] * Q5[0] \
    + df51[c][2004] * Q4[0] + df51[c][2003] * Q3[0] \
    + df51[c][2002] * Q2[0] + df51[c][2001])
    R1AB22009[c] = RAB22009[c]
    R1AB22008[c] = RAB22008[c] + (1 - RcMax[c]) * df51[c][2009] *  Q9[8]
    R1AB22007[c] = RAB22007[c] + (1 - RcMax[c]) * (df51[c][2009] *  Q9[7] + df51[c][2008] * Q8[7])
    R1AB22006[c] = RAB22006[c] + (1 - RcMax[c]) * (df51[c][2009] *  Q9[6]\
    + df51[c][2008] * Q8[6] + df51[c][2007] * Q7[6])
    R1AB22005[c] = RAB22005[c] + (1 - RcMax[c]) * (df51[c][2009] *  Q9[5]\
    + df51[c][2008] * Q8[5] + df51[c][2007] * Q7[5] \
    + df51[c][2006] * Q6[5])
    R1AB22004[c] = RAB22004[c] + (1 - RcMax[c]) * (df51[c][2009] *  Q9[4]\
    + df51[c][2008] * Q8[4] + df51[c][2007] * Q7[4] \
    + df51[c][2006] * Q6[4] + df51[c][2005] * Q5[4])
    R1AB22003[c] = RAB22003[c] + (1 - RcMax[c]) * (df51[c][2009] *  Q9[3]\
    + df51[c][2008] * Q8[3] + df51[c][2007] * Q7[3] \
    + df51[c][2006] * Q6[3] + df51[c][2005] * Q5[3] \
    + df51[c][2004] * Q4[3])
    R1AB22002[c] = RAB22002[c] + (1 - RcMax[c]) * (df51[c][2009] *  Q9[2]\
    + df51[c][2008] * Q8[2] + df51[c][2007] * Q7[2] \
    + df51[c][2006] * Q6[2] + df51[c][2005] * Q5[2] \
    + df51[c][2004] * Q4[2] + df51[c][2003] * Q3[2])
    R1AB22001[c] = RAB22001[c] + (1 - RcMax[c]) * (df51[c][2009] *  Q9[1]\
    + df51[c][2008] * Q8[1] + df51[c][2007] * Q7[1] \
    + df51[c][2006] * Q6[1] + df51[c][2005] * Q5[1] \
    + df51[c][2004] * Q4[1] + df51[c][2003] * Q3[1] \
    + df51[c][2002] * Q2[1])
    R1AB22000[c] = RAB22000[c] + (1 - RcMax[c]) * (df51[c][2009] *  Q9[0]\
    + df51[c][2008] * Q8[0] + df51[c][2007] * Q7[0] \
    + df51[c][2006] * Q6[0] + df51[c][2005] * Q5[0] \
    + df51[c][2004] * Q4[0] + df51[c][2003] * Q3[0] \
    + df51[c][2002] * Q2[0] + df51[c][2001])
    R1AB12009[c] = RAB12009[c]
    R1AB12008[c] = RAB12008[c] + (1 - Rcmin[c]) * df51[c][2009] *  Q9[8]
    R1AB12007[c] = RAB12007[c] + (1 - Rcmin[c]) * (df51[c][2009] *  Q9[7] + df51[c][2008] * Q8[7])
    R1AB12006[c] = RAB12006[c] + (1 - Rcmin[c]) * (df51[c][2009] *  Q9[6]\
    + df51[c][2008] * Q8[6] + df51[c][2007] * Q7[6])
    R1AB12005[c] = RAB12005[c] + (1 - Rcmin[c]) * (df51[c][2009] *  Q9[5]\
    + df51[c][2008] * Q8[5] + df51[c][2007] * Q7[5] \
    + df51[c][2006] * Q6[5])
    R1AB12004[c] = RAB12004[c] + (1 - Rcmin[c]) * (df51[c][2009] *  Q9[4]\
    + df51[c][2008] * Q8[4] + df51[c][2007] * Q7[4] \
    + df51[c][2006] * Q6[4] + df51[c][2005] * Q5[4])
    R1AB12003[c] = RAB12003[c] + (1 - Rcmin[c]) * (df51[c][2009] *  Q9[3]\
    + df51[c][2008] * Q8[3] + df51[c][2007] * Q7[3] \
    + df51[c][2006] * Q6[3] + df51[c][2005] * Q5[3] \
    + df51[c][2004] * Q4[3])
    R1AB12002[c] = RAB12002[c] + (1 - Rcmin[c]) * (df51[c][2009] *  Q9[2]\
    + df51[c][2008] * Q8[2] + df51[c][2007] * Q7[2] \
    + df51[c][2006] * Q6[2] + df51[c][2005] * Q5[2] \
    + df51[c][2004] * Q4[2] + df51[c][2003] * Q3[2])
    R1AB12001[c] = RAB12001[c] + (1 - Rcmin[c]) * (df51[c][2009] *  Q9[1]\
    + df51[c][2008] * Q8[1] + df51[c][2007] * Q7[1] \
    + df51[c][2006] * Q6[1] + df51[c][2005] * Q5[1] \
    + df51[c][2004] * Q4[1] + df51[c][2003] * Q3[1] \
    + df51[c][2002] * Q2[1])
    R1AB12000[c] = RAB12000[c] + (1 - Rcmin[c]) * (df51[c][2009] *  Q9[0]\
    + df51[c][2008] * Q8[0] + df51[c][2007] * Q7[0] \
    + df51[c][2006] * Q6[0] + df51[c][2005] * Q5[0] \
    + df51[c][2004] * Q4[0] + df51[c][2003] * Q3[0] \
    + df51[c][2002] * Q2[0] + df51[c][2001])

# Sensitivity coefficient computation
varianceR12000 = np.mean(R12000**2)-np.mean(R12000)**2
varianceR12001 = np.mean(R12001**2)-np.mean(R12001)**2
varianceR12002 = np.mean(R12002**2)-np.mean(R12002)**2
varianceR12003 = np.mean(R12003**2)-np.mean(R12003)**2
varianceR12004 = np.mean(R12004**2)-np.mean(R12004)**2
varianceR12005 = np.mean(R12005**2)-np.mean(R12005)**2
varianceR12006 = np.mean(R12006**2)-np.mean(R12006)**2
varianceR12007 = np.mean(R12007**2)-np.mean(R12007)**2
varianceR12008 = np.mean(R12008**2)-np.mean(R12008)**2
varianceR12009 = np.mean(R12009**2)-np.mean(R12009)**2

RSfimin2000 = R12000.multiply(R1AB12000, axis = 0)
RSfimax2000 = R12000.multiply(R1AB22000, axis = 0)
STfimin2000 = (RSfimin2000.sum(axis = 0)/10000 - np.mean(R12000)**2)/varianceR12000
STfimax2000 = (RSfimax2000.sum(axis = 0)/10000 - np.mean(R12000)**2)/varianceR12000
RSfimin2001 = R12001.multiply(R1AB12001, axis = 0)
RSfimax2001 = R12001.multiply(R1AB22001, axis = 0)
STfimin2001 = (RSfimin2001.sum(axis = 0)/10000 - np.mean(R12001)**2)/varianceR12001
STfimax2001 = (RSfimax2001.sum(axis = 0)/10000 - np.mean(R12001)**2)/varianceR12001
RSfimin2002 = R12002.multiply(R1AB12002, axis = 0)
RSfimax2002 = R12002.multiply(R1AB22002, axis = 0)
STfimin2002 = (RSfimin2002.sum(axis = 0)/10000 - np.mean(R12002)**2)/varianceR12002
STfimax2002 = (RSfimax2002.sum(axis = 0)/10000 - np.mean(R12002)**2)/varianceR12002
RSfimin2003 = R12003.multiply(R1AB12003, axis = 0)
RSfimax2003 = R12003.multiply(R1AB22003, axis = 0)
STfimin2003 = (RSfimin2003.sum(axis = 0)/10000 - np.mean(R12003)**2)/varianceR12003
STfimax2003 = (RSfimax2003.sum(axis = 0)/10000 - np.mean(R12003)**2)/varianceR12003
RSfimin2004 = R12004.multiply(R1AB12004, axis = 0)
RSfimax2004 = R12004.multiply(R1AB22004, axis = 0)
STfimin2004 = (RSfimin2004.sum(axis = 0)/10000 - np.mean(R12004)**2)/varianceR12004
STfimax2004 = (RSfimax2004.sum(axis = 0)/10000 - np.mean(R12004)**2)/varianceR12004
RSfimin2005 = R12005.multiply(R1AB12005, axis = 0)
RSfimax2005 = R12005.multiply(R1AB22005, axis = 0)
STfimin2005 = (RSfimin2005.sum(axis = 0)/10000 - np.mean(R12005)**2)/varianceR12005
STfimax2005 = (RSfimax2005.sum(axis = 0)/10000 - np.mean(R12005)**2)/varianceR12005
RSfimin2006 = R12006.multiply(R1AB12006, axis = 0)
RSfimax2006 = R12006.multiply(R1AB22006, axis = 0)
STfimin2006 = (RSfimin2006.sum(axis = 0)/10000 - np.mean(R12006)**2)/varianceR12006
STfimax2006 = (RSfimax2006.sum(axis = 0)/10000 - np.mean(R12006)**2)/varianceR12006
RSfimin2007 = R12007.multiply(R1AB12007, axis = 0)
RSfimax2007 = R12007.multiply(R1AB22007, axis = 0)
STfimin2007 = (RSfimin2007.sum(axis = 0)/10000 - np.mean(R12007)**2)/varianceR12007
STfimax2007 = (RSfimax2007.sum(axis = 0)/10000 - np.mean(R12007)**2)/varianceR12007
RSfimin2008 = R12008.multiply(R1AB12008, axis = 0)
RSfimax2008 = R12008.multiply(R1AB22008, axis = 0)
STfimin2008 = (RSfimin2008.sum(axis = 0)/10000 - np.mean(R12008)**2)/varianceR12008
STfimax2008 = (RSfimax2008.sum(axis = 0)/10000 - np.mean(R12008)**2)/varianceR12008
RSfimin2009 = R12009.multiply(R1AB12009, axis = 0)
RSfimax2009 = R12009.multiply(R1AB22009, axis = 0)
STfimin2009 = (RSfimin2009.sum(axis = 0)/10000 - np.mean(R12009)**2)/varianceR12009
STfimax2009 = (RSfimax2009.sum(axis = 0)/10000 - np.mean(R12009)**2)/varianceR12009
SfiMax2000 = pd.Series(STfimax2000)
SfiMax2001 = pd.Series(STfimax2001)
SfiMax2002 = pd.Series(STfimax2002)
SfiMax2003 = pd.Series(STfimax2003)
SfiMax2004 = pd.Series(STfimax2004)
SfiMax2005 = pd.Series(STfimax2005)
SfiMax2006 = pd.Series(STfimax2006)
SfiMax2007 = pd.Series(STfimax2007)
SfiMax2008 = pd.Series(STfimax2008)
SfiMax2009 = pd.Series(STfimax2009)
Sfimin2000 = pd.Series(STfimin2000)
Sfimin2001 = pd.Series(STfimin2001)
Sfimin2002 = pd.Series(STfimin2002)
Sfimin2003 = pd.Series(STfimin2003)
Sfimin2004 = pd.Series(STfimin2004)
Sfimin2005 = pd.Series(STfimin2005)
Sfimin2006 = pd.Series(STfimin2006)
Sfimin2007 = pd.Series(STfimin2007)
Sfimin2008 = pd.Series(STfimin2008)
Sfimin2009 = pd.Series(STfimin2009)
Max01 = pd.concat([SfiMax2000, SfiMax2001], axis = 1)
Max02 = pd.concat([Max01, SfiMax2002], axis = 1, ignore_index = True)
Max03 = pd.concat([Max02, SfiMax2003], axis = 1, ignore_index = True)
Max04 = pd.concat([Max03, SfiMax2004], axis = 1, ignore_index = True)
Max05 = pd.concat([Max04, SfiMax2005], axis = 1, ignore_index = True)
Max06 = pd.concat([Max05, SfiMax2006], axis = 1, ignore_index = True)
Max07 = pd.concat([Max06, SfiMax2007], axis = 1, ignore_index = True)
Max08 = pd.concat([Max07, SfiMax2008], axis = 1, ignore_index = True)
STFiMax = pd.concat([Max08, SfiMax2009], axis = 1, ignore_index = True)
min01 = pd.concat([Sfimin2000, Sfimin2001], axis = 1)
min02 = pd.concat([min01, Sfimin2002], axis = 1, ignore_index = True)
min03 = pd.concat([min02, Sfimin2003], axis = 1, ignore_index = True)
min04 = pd.concat([min03, Sfimin2004], axis = 1, ignore_index = True)
min05 = pd.concat([min04, Sfimin2005], axis = 1, ignore_index = True)
min06 = pd.concat([min05, Sfimin2006], axis = 1, ignore_index = True)
min07 = pd.concat([min06, Sfimin2007], axis = 1, ignore_index = True)
min08 = pd.concat([min07, Sfimin2008], axis = 1, ignore_index = True)
STFimin = pd.concat([min08, Sfimin2009], axis = 1, ignore_index = True)
STFiMax2 = STFiMax.rename(columns=lambda x: x+2000)
STFimin2 = STFimin.rename(columns=lambda x: x+2000)
STot = STFiMax2 + STFimin2
STot = STFiTot.sort_values([], ascending = True)

# Export the project to an .xls spreadsheet
writer = pd.ExcelWriter('C:/Users/Samuele/Dropbox/ECGC_Barcelona/1.Projects/01-DG_REGIO/Work/ERDF2000-2006_Sensitivity.xlsx')
STFiMax2.to_excel(writer,'ST_Fi_Max')
STFimin2.to_excel(writer,'ST_Fi_min')
writer.save()