import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import chaospy as cp
import random
from scipy import stats
%matplotlib inline

df2 = pd.read_excel('C:/Users/Samuele/Dropbox/ECGC_Barcelona/1.Projects/01-DG_REGIO/Work/Index slope 07-13.xlsx', sheetname='ESF07-13', parse_cols = 'AS:BB')
df2.columns = df2.iloc[2]
df3 = df2.iloc[3:275]
df4 = df3.set_index('Row Labels')
mu = pd.DataFrame(index = [2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015], \
data = (df4.columns.values-2006)*(df4[2015]['AT11']-0)/(2015-2006))
mu = mu.rename(columns={0: 'mu1'})
df4b = pd.concat([df4, mu.T])

for i, row in df4b.iterrows():
    b = (df4b[2007]-df4b[2007]['mu1'], df4b[2008]-df4b[2008]['mu1'], df4b[2009]-df4b[2009]['mu1'],\
    df4b[2010]-df4b[2010]['mu1'], df4b[2011]-df4b[2011]['mu1'], df4b[2012]-df4b[2012]['mu1'], \
    df4b[2013]-df4b[2013]['mu1'], df4b[2014]-df4b[2014]['mu1'], df4b[2015]-df4b[2015]['mu1'])
    c = sum(b)
    df4b['muavg']= c
    
# Compute the relative scale
df4b['murel']=(max(df4b['muavg'])-df4b['muavg'])/(max(df4b['muavg'])-min(df4b['muavg']))
df6 = df4b.sort_values(['murel'], ascending = True)
df7 = df6.drop('mu1')

# Prepare for the expenditure allocations
df21 = pd.read_excel('C:/Users/Samuele/Dropbox/ECGC_Barcelona/1.Projects/01-DG_REGIO/Work/Index slope 07-13.xlsx',\
sheetname='ESF07-13', parse_cols = 'K:T')
df21.columns = df21.iloc[3]
df31 = df21.iloc[4:276]
df51 = df31.T.fillna(0)

# Define the residues A
B9 = []
for n in range(1,10):
    def A(n):
        return [(2**(j))/(2**n-1) for j in range(n)]
    B9.append(A(n))
C9 = np.array(B9)
D9 = np.insert(C9[0], [0, 0, 0, 0, 0, 0, 0, 0], 0)
E9 = np.insert(C9[1], [0, 0, 0, 0, 0, 0, 0], 0)
F9 = np.insert(C9[2], [0, 0, 0, 0, 0, 0], 0)
G9 = np.insert(C9[3], [0, 0, 0, 0, 0], 0)
H9 = np.insert(C9[4], [0, 0, 0, 0], 0)
I9 = np.insert(C9[5], [0, 0, 0], 0)
J9 = np.insert(C9[6], [0, 0], 0)
K9 = np.insert(C9[7], [0], 0)
L9 = np.array(C9[8])
M9 = (D9, E9, F9, G9, H9, I9, J9, K9, L9)

B8 = []
for n in range(1,9):
    def A(n):
        return [(2**(j))/(2**n-1) for j in range(n)]
    B8.append(A(n))
C8 = np.array(B8)
D8 = np.insert(C8[0], [0, 0, 0, 0, 0, 0, 0], 0)
E8 = np.insert(C8[1], [0, 0, 0, 0, 0, 0], 0)
F8 = np.insert(C8[2], [0, 0, 0, 0, 0], 0)
G8 = np.insert(C8[3], [0, 0, 0, 0], 0)
H8 = np.insert(C8[4], [0, 0, 0], 0)
I8 = np.insert(C8[5], [0, 0], 0)
J8 = np.insert(C8[6], [0], 0)
K8 = np.array(C8[7])
L8 = (D8, E8, F8, G8, H8, I8, J8, K8)

B7 = []
for n in range(1,8):
    def A(n):
        return [(2**(j))/(2**n-1) for j in range(n)]
    B7.append(A(n))
C7 = np.array(B7)
D7 = np.insert(C7[0], [0, 0, 0, 0, 0, 0], 0)
E7 = np.insert(C7[1], [0, 0, 0, 0, 0], 0)
F7 = np.insert(C7[2], [0, 0, 0, 0], 0)
G7 = np.insert(C7[3], [0, 0, 0], 0)
H7 = np.insert(C7[4], [0, 0], 0)
I7 = np.insert(C7[5], [0], 0)
J7 = np.array(C7[6])
K7 = (D7, E7, F7, G7, H7, I7, J7)

B6 = []
for n in range(1,7):
    def A(n):
        return [(2**(j))/(2**n-1) for j in range(n)]
    B6.append(A(n))
C6 = np.array(B6)
D6 = np.insert(C6[0], [0, 0, 0, 0, 0], 0)
E6 = np.insert(C6[1], [0, 0, 0, 0], 0)
F6 = np.insert(C6[2], [0, 0, 0], 0)
G6 = np.insert(C6[3], [0, 0], 0)
H6 = np.insert(C6[4], [0], 0)
I6 = np.array(C6[5])
J6 = (D6, E6, F6, G6, H6, I6)

B5 = []
for n in range(1,6):
    def A(n):
        return [(2**(j))/(2**n-1) for j in range(n)]
    B5.append(A(n))
C5 = np.array(B5)
D5 = np.insert(C5[0], [0, 0, 0, 0], 0)
E5 = np.insert(C5[1], [0, 0, 0], 0)
F5 = np.insert(C5[2], [0, 0], 0)
G5 = np.insert(C5[3], [0], 0)
H5 = np.array(C5[4])
I5 = (D5, E5, F5, G5, H5)

B4 = []
for n in range(1,5):
    def A(n):
        return [(2**(j))/(2**n-1) for j in range(n)]
    B4.append(A(n))
C4 = np.array(B4)
D4 = np.insert(C4[0], [0, 0, 0], 0)
E4 = np.insert(C4[1], [0, 0], 0)
F4 = np.insert(C4[2], [0], 0)
G4 = np.array(C4[3])
H4 = (D4, E4, F4, G4)

B3 = []
for n in range(1,4):
    def A(n):
        return [(2**(j))/(2**n-1) for j in range(n)]
    B3.append(A(n))
C3 = np.array(B3)
D3 = np.insert(C3[0], [0, 0], 0)
E3 = np.insert(C3[1], [0], 0)
F3 = np.array(C3[2])
G3 = (D3, E3, F3)

B2 = []
for n in range(1,3):
    def A(n):
        return [(2**(j))/(2**n-1) for j in range(n)]
    B2.append(A(n))
C2 = np.array(B2)
D2 = np.insert(C2[0], [0], 0)
E2 = np.array(C2[1])
F2 = (D2, E2)

B1 = []
for n in range(1,2):
    def A(n):
        return [(2**(j))/(2**n-1) for j in range(n)]
    B1.append(A(n))
C1 = np.array(B1)
E1 = (C1)

# Define the FiMin and FiMax distributions
FiMin = cp.Uniform(0.20, 0.40)
distributionFiMin = FiMin.sample(10000, rule="S")
np.random.shuffle(distributionFiMin)
FiMax = cp.Uniform(0.80, 1.00)
distributionFiMax = FiMax.sample(10000, rule="S")
np.random.shuffle(distributionFiMax)

Rc = pd.DataFrame([])
for k, row in df7.iterrows():
    muA = df7['murel']
    distributionFi = distributionFiMax - muA * (distributionFiMax - distributionFiMin)
    Rc[k] = pd.DataFrame(distributionFi[k], columns = ['Fi'])
    
R2015 = pd.DataFrame([])
R2014 = pd.DataFrame([])
R2013 = pd.DataFrame([])
R2012 = pd.DataFrame([])
R2011 = pd.DataFrame([])
R2010 = pd.DataFrame([])
R2009 = pd.DataFrame([])
R2008 = pd.DataFrame([])
R2007 = pd.DataFrame([])
R12015 = pd.DataFrame([])
R12014 = pd.DataFrame([])
R12013 = pd.DataFrame([])
R12012 = pd.DataFrame([])
R12011 = pd.DataFrame([])
R12010 = pd.DataFrame([])
R12009 = pd.DataFrame([])
R12008 = pd.DataFrame([])
R12007 = pd.DataFrame([])

for c in df51:
    n8 = int(muA[c]*(8-1))+1
    n7 = int(muA[c]*(7-1))+1
    n6 = int(muA[c]*(6-1))+1
    n5 = int(muA[c]*(5-1))+1
    n4 = int(muA[c]*(4-1))+1
    n3 = int(muA[c]*(3-1))+1
    n2 = int(muA[c]*(2-1))+1
    Q8 = random.choice(L8[0:n8])
    Q7 = random.choice(K7[0:n7])
    Q6 = random.choice(J6[0:n6])
    Q5 = random.choice(I5[0:n5])
    Q4 = random.choice(H4[0:n4])
    Q3 = random.choice(G3[0:n3])
    Q2 = random.choice(F2[0:n2])
    R2015[c] = Rc[c]*(df51[c][2015])
    R2014[c] = Rc[c]*(df51[c][2014])
    R2013[c] = Rc[c]*(df51[c][2013])
    R2012[c] = Rc[c]*(df51[c][2012])
    R2011[c] = Rc[c]*(df51[c][2011])
    R2010[c] = Rc[c]*(df51[c][2010])
    R2009[c] = Rc[c]*(df51[c][2009])
    R2008[c] = Rc[c]*(df51[c][2008])
    R2007[c] = (Rc[c]/Rc[c])*df51[c][2007]
    R12015[c] = R2015[c]
    R12014[c] = R2014[c] + (1 - Rc[c]) * (df51[c][2015] * Q8[7])
    R12013[c] = R2013[c] + (1 - Rc[c]) * (df51[c][2015] * Q8[6] + df51[c][2014] * Q7[6])
    R12012[c] = R2012[c] + (1 - Rc[c]) * (df51[c][2015] * Q8[5] + df51[c][2014] * Q7[5] \
    + df51[c][2013] * Q6[5])
    R12011[c] = R2011[c] + (1 - Rc[c]) * (df51[c][2015] * Q8[4] + df51[c][2014] * Q7[4] \
    + df51[c][2013] * Q6[4] + df51[c][2012] * Q5[4])
    R12010[c] = R2010[c] + (1 - Rc[c]) * (df51[c][2015] * Q8[3] + df51[c][2014] * Q7[3] \
    + df51[c][2013] * Q6[3] + df51[c][2012] * Q5[3] \
    + df51[c][2011] * Q4[3])
    R12009[c] = R2009[c] + (1 - Rc[c]) * (df51[c][2015] * Q8[2] + df51[c][2014] * Q7[2] \
    + df51[c][2013] * Q6[2] + df51[c][2012] * Q5[2] \
    + df51[c][2011] * Q4[2] + df51[c][2010] * Q3[2])
    R12008[c] = R2008[c] + (1 - Rc[c]) * (df51[c][2015] * Q8[1] + df51[c][2014] * Q7[1] \
    + df51[c][2013] * Q6[1] + df51[c][2012] * Q5[1] \
    + df51[c][2011] * Q4[1] + df51[c][2010] * Q3[1] \
    + df51[c][2009] * Q2[1])
    R12007[c] = R2007[c] + (1 - Rc[c]) * (df51[c][2015] * Q8[0] + df51[c][2014] * Q7[0] \
    + df51[c][2013] * Q6[0] + df51[c][2012] * Q5[0] \
    + df51[c][2011] * Q4[0] + df51[c][2010] * Q3[0] \
    + df51[c][2009] * Q2[0] + df51[c][2008])
    
# Evaluate closure
Regression = pd.DataFrame.mean(R12007, axis = 0) + pd.DataFrame.mean(R12008, axis = 0) + pd.DataFrame.mean(R12009, axis = 0)+ \
pd.DataFrame.mean(R12010, axis = 0) + pd.DataFrame.mean(R12011, axis = 0) + pd.DataFrame.mean(R12012, axis = 0) + \
pd.DataFrame.mean(R12013, axis = 0) + pd.DataFrame.mean(R12014, axis = 0) + pd.DataFrame.mean(R12015, axis = 0)
Closure = pd.DataFrame.sum(df51, axis = 0)
Diff = (Closure - Regression)*100/Closure
Diff2 = pd.Series(Diff)

# Mean, Standard Deviation and Standard Error Calculation:
averageR12007 = np.mean(R12007)
R22007 = R12007.append(averageR12007, ignore_index = True)
R32007 = R22007[10000:]
R32007['year'] = '2007'
R32007.set_index('year', append=True, inplace=True)
R32007.reorder_levels(['year', None])
averageR12008 = np.mean(R12008)
R22008 = R12008.append(averageR12008, ignore_index = True)
R32008 = R22008[10000:]
R32008['year'] = '2008'
R32008.set_index('year', append=True, inplace=True)
R32008.reorder_levels(['year', None])
R08 = pd.concat([R32007.T, R32008.T], axis=1)
averageR12009 = np.mean(R12009)
R22009 = R12009.append(averageR12009, ignore_index = True)
R32009 = R22009[10000:]
R32009['year'] = '2009'
R32009.set_index('year', append=True, inplace=True)
R32009.reorder_levels(['year', None])
R09 = pd.concat([R08, R32009.T], axis=1)
averageR12010 = np.mean(R12010)
R22010 = R12010.append(averageR12010, ignore_index = True)
R32010 = R22010[10000:]
R32010['year'] = '2010'
R32010.set_index('year', append=True, inplace=True)
R32010.reorder_levels(['year', None])
R10 = pd.concat([R09, R32010.T], axis=1)
averageR12011 = np.mean(R12011)
R22011 = R12011.append(averageR12011, ignore_index = True)
R32011 = R22011[10000:]
R32011['year'] = '2011'
R32011.set_index('year', append=True, inplace=True)
R32011.reorder_levels(['year', None])
R11 = pd.concat([R10, R32011.T], axis=1)
averageR12012 = np.mean(R12011)
R22012 = R12012.append(averageR12011, ignore_index = True)
R32012 = R22012[10000:]
R32012['year'] = '2012'
R32012.set_index('year', append=True, inplace=True)
R32012.reorder_levels(['year', None])
R12 = pd.concat([R11, R32012.T], axis=1)
averageR12013 = np.mean(R12013)
R22013 = R12013.append(averageR12013, ignore_index = True)
R32013 = R22013[10000:]
R32013['year'] = '2013'
R32013.set_index('year', append=True, inplace=True)
R32013.reorder_levels(['year', None])
R13 = pd.concat([R12, R32013.T], axis=1)
averageR12014 = np.mean(R12014)
R22014 = R12014.append(averageR12014, ignore_index = True)
R32014 = R22014[10000:]
R32014['year'] = '2014'
R32014.set_index('year', append=True, inplace=True)
R32014.reorder_levels(['year', None])
R14 = pd.concat([R13, R32014.T], axis=1)
averageR12015 = np.mean(R12015)
R22015 = R12015.append(averageR12015, ignore_index = True)
R32015 = R22015[10000:]
R32015['year'] = '2015'
R32015.set_index('year', append=True, inplace=True)
R32015.reorder_levels(['year', None])
R15avg = pd.concat([R14, R32015.T], axis=1)
stdRR2007 = np.std(R12007)
R42007 = R12007.append(stdRR2007, ignore_index = True)
R52007 = R42007[10000:]
R52007['year'] = '2007'
R52007.set_index('year', append=True, inplace=True)
R52007.reorder_levels(['year', None])
stdRR2008 = np.std(R12008)
R42008 = R12008.append(stdRR2008, ignore_index = True)
R52008 = R42008[10000:]
R52008['year'] = '2008'
R52008.set_index('year', append=True, inplace=True)
R52008.reorder_levels(['year', None])
R08d = pd.concat([R52007.T, R52008.T], axis=1)
stdRR2009 = np.std(R12009)
R42009 = R12009.append(stdRR2009, ignore_index = True)
R52009 = R42009[10000:]
R52009['year'] = '2009'
R52009.set_index('year', append=True, inplace=True)
R52009.reorder_levels(['year', None])
R09d = pd.concat([R08d, R52009.T], axis=1)
stdRR2010 = np.std(R12010)
R42010 = R12010.append(stdRR2010, ignore_index = True)
R52010 = R42010[10000:]
R52010['year'] = '2010'
R52010.set_index('year', append=True, inplace=True)
R52010.reorder_levels(['year', None])
R10d = pd.concat([R09d, R52010.T], axis=1)
stdRR2011 = np.std(R12011)
R42011 = R12011.append(stdRR2011, ignore_index = True)
R52011 = R42011[10000:]
R52011['year'] = '2011'
R52011.set_index('year', append=True, inplace=True)
R52011.reorder_levels(['year', None])
R11d = pd.concat([R10d, R52011.T], axis=1)
stdRR2012 = np.std(R12012)
R42012 = R12012.append(stdRR2012, ignore_index = True)
R52012 = R42012[10000:]
R52012['year'] = '2012'
R52012.set_index('year', append=True, inplace=True)
R52012.reorder_levels(['year', None])
R12d = pd.concat([R11d, R52012.T], axis=1)
stdRR12013 = np.std(R12013)
R42013 = R12013.append(stdRR12013, ignore_index = True)
R52013 = R42013[10000:]
R52013['year'] = '2013'
R52013.set_index('year', append=True, inplace=True)
R52013.reorder_levels(['year', None])
R13d = pd.concat([R12d, R52013.T], axis=1)
stdRR12014 = np.std(R12014)
R42014 = R12014.append(stdRR12014, ignore_index = True)
R52014 = R42014[10000:]
R52014['year'] = '2014'
R52014.set_index('year', append=True, inplace=True)
R52014.reorder_levels(['year', None])
R14d = pd.concat([R13d, R52014.T], axis=1)
stdRR12015 = np.std(R12015)
R42015 = R12015.append(stdRR12015, ignore_index = True)
R52015 = R42015[10000:]
R52015['year'] = '2015'
R52015.set_index('year', append=True, inplace=True)
R52015.reorder_levels(['year', None])
R15d = pd.concat([R14d, R52015.T], axis=1)
sErrR12007 = pd.Series(stats.sem(R12007), index = R12007.columns)
R62007 = R12007.append(sErrR12007, ignore_index = True)
R72007 = R62007[10000:]
R72007['year'] = '2007'
R72007.set_index('year', append=True, inplace=True)
R72007.reorder_levels(['year', None])
sErrR12008 = pd.Series(stats.sem(R12008), index = R12008.columns)
R62008 = R12008.append(sErrR12008, ignore_index = True)
R72008 = R62008[10000:]
R72008['year'] = '2008'
R72008.set_index('year', append=True, inplace=True)
R72008.reorder_levels(['year', None])
R08d = pd.concat([R72007.T, R72008.T], axis=1)
sErrR12009 = pd.Series(stats.sem(R12009), index = R12009.columns)
R62009 = R12009.append(sErrR12009, ignore_index = True)
R72009 = R62009[10000:]
R72009['year'] = '2009'
R72009.set_index('year', append=True, inplace=True)
R72009.reorder_levels(['year', None])
R09d = pd.concat([R08d, R72009.T], axis=1)
sErrR12010 = pd.Series(stats.sem(R12010), index = R12009.columns)
R62010 = R12010.append(sErrR12010, ignore_index = True)
R72010 = R62010[10000:]
R72010['year'] = '2010'
R72010.set_index('year', append=True, inplace=True)
R72010.reorder_levels(['year', None])
R10d = pd.concat([R09d, R72010.T], axis=1)
sErrR12011 = pd.Series(stats.sem(R12011), index = R12009.columns)
R62011 = R12011.append(sErrR12011, ignore_index = True)
R72011 = R62011[10000:]
R72011['year'] = '2011'
R72011.set_index('year', append=True, inplace=True)
R72011.reorder_levels(['year', None])
R11d = pd.concat([R10d, R72011.T], axis=1)
sErrR12012 = pd.Series(stats.sem(R12012), index = R12012.columns)
R62012 = R12012.append(sErrR12012, ignore_index = True)
R72012 = R62012[10000:]
R72012['year'] = '2012'
R72012.set_index('year', append=True, inplace=True)
R72012.reorder_levels(['year', None])
R12d = pd.concat([R11d, R72012.T], axis=1)
sErrR12013 = pd.Series(stats.sem(R12013), index = R12013.columns)
R62013 = R12013.append(sErrR12013, ignore_index = True)
R72013 = R62013[10000:]
R72013['year'] = '2013'
R72013.set_index('year', append=True, inplace=True)
R72013.reorder_levels(['year', None])
R13d = pd.concat([R12d, R72013.T], axis=1)
sErrR12014 = pd.Series(stats.sem(R12014), index = R12013.columns)
R62014 = R12014.append(sErrR12014, ignore_index = True)
R72014 = R62014[10000:]
R72014['year'] = '2014'
R72014.set_index('year', append=True, inplace=True)
R72014.reorder_levels(['year', None])
R14d = pd.concat([R13d, R72014.T], axis=1)
sErrR12015 = pd.Series(stats.sem(R12015), index = R12013.columns)
R62015 = R12015.append(sErrR12015, ignore_index = True)
R72015 = R62015[10000:]
R72015['year'] = '2015'
R72015.set_index('year', append=True, inplace=True)
R72015.reorder_levels(['year', None])
R15d = pd.concat([R14d, R72015.T], axis=1)

# Export the project to an .xls spreadsheet
writer = pd.ExcelWriter('C:/Users/Samuele/Dropbox/ECGC_Barcelona/1.Projects/01-DG_REGIO/Work/ESF2007-2013.xlsx')
R15avg.to_excel(writer,'expenditures')
R15d.to_excel(writer,'standard_deviation')
R15s.to_excel(writer,'standard_error')
writer.save()